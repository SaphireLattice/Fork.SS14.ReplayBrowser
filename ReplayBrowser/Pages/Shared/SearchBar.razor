@using Humanizer
@using Microsoft.AspNetCore.Mvc.ViewFeatures
@using Microsoft.Extensions.Configuration
@using ReplayBrowser.Data
@using ReplayBrowser.Models
@inject IConfiguration Configuration

@code{
    [Parameter] public List<SearchQueryItem>? Items { get; set; }
}

@{
    var searchModes = Enum.GetValues(typeof(SearchMode)).Cast<SearchMode>().ToList();
    void RenderLine(SearchQueryItem? item) {
        <div class="d-flex ms-auto @(item is null ? "hidden prefab " : "")search-form">
            <input
                type="text"
                class="form-control"
                placeholder="Search for a replay..."
                aria-label="Search"
                value="@(item?.SearchValue)"
                data-filter="/api/Data/username-completion?username=#QUERY#"
            >
            <div class="dropdown">
                <button class="btn-secondary btn dropdown-toggle" type="button" style="margin-left: 1rem; margin-right: 1rem;" data-bs-toggle="dropdown" aria-expanded="false" data-type="@SearchQueryItem.QueryName(item?.SearchModeEnum ?? SearchMode.PlayerOocName)">
                    @((item?.SearchModeEnum ?? SearchMode.PlayerOocName).Humanize())
                </button>
                <ul class="dropdown-menu no-affect">
                    @foreach (var mode in searchModes)
                    {
                        <li><a class="dropdown-item" data-type="@SearchQueryItem.QueryName(mode)">@mode.Humanize()</a></li>
                    }
                </ul>
            </div>
            <div class="search-container">
                <button class="btn btn-outline-danger remove-bar">
                    -
                </button>
                <button class="btn btn-outline-primary" type="button" onclick="moveUp(this)">
                    ↑
                </button>
                <button class="btn btn-outline-primary" type="button" onclick="moveDown(this)">
                    ↓
                </button>
            </div>
        </div>
    }
}

<div class="search-bar">
@{
    RenderLine(null); // Renders the prefab template so the JS code has something to hydrate later
    foreach (var item in Items ?? []) {
        RenderLine(item);
    }
}
</div>

<div class="d-flex" style="margin-top: 1rem;">
    <button class="btn btn-outline-primary" style="margin-right: 1rem" type="button" id="addSearchBar">
        +
    </button>
    <button class="btn btn-outline-success" type="button" onclick="search(0)">Search</button>
</div>

<style>
    /* this is a bit stupid
        so. the autocomplete plugin uses a div dropdown right? but that dropdown is placed directly ON the input,
        we want to move it down, but dont want to move the no-affect dropdown, so we move EVERY dropdown down, but not the no-affect one
     */
    .dropdown-menu {
        margin-top: 2.5rem;
    }

    .no-affect {
        margin-top: 0;
    }

    .hidden {
        display: none !important;
    }

    .search-container .btn {
        margin-right: 0.5rem;
    }

    .search-bar .search-form {
        margin-bottom: 1rem;
        max-height: 3rem;
    }

    .search-container {
        display: flex;
        flex-direction: row;
    }

    @@media (max-width: 768px) {
        .search-bar .search-form {
            flex-direction: column !important;
        }

        .search-form {
            margin-bottom: 6rem !important;
        }

        .search-bar input {
            font-size: 18px !important;
            margin-bottom: 10px !important;
        }

        .btn {
            margin-bottom: 10px !important;
        }

        .dropdown-menu {
            font-size: 18px !important;
        }
    }
</style>

<script>
    /**
    @@param {HTMLElement} element
    */
    function moveUp(element) {
        const parent = element.parentElement.parentElement;
        const previousElement = parent.previousElementSibling;
        if (previousElement !== null) {
            parent.parentNode.insertBefore(parent, previousElement);
        }
    }

    /**
    @@param {HTMLElement} element
    */
    function moveDown(element) {
        const parent = element.parentElement.parentElement;
        const nextElement = parent.nextElementSibling;
        if (nextElement !== null) {
            parent.parentNode.insertBefore(nextElement, parent);
        }
    }

    async function search(page) {
        const searchBars = document.querySelectorAll('.search-bar input');

        // sanity check
        if (page === null) page = 0;

        const builder = new URLSearchParams();

        const searchModeCount = {};
        let multiple = false;

        let searches = [...searchBars].map((searchBar, index) => {
                const searchMode = searchBar.parentElement.querySelector('.dropdown-toggle').getAttribute("data-type");
                const searchValue = searchBar.value;
                if (!searchValue) return;

                searchModeCount[searchMode] = (searchModeCount[searchMode] || 0) + 1
                if (searchModeCount[searchMode] > 1)
                    multiple = true

                return {
                    searchMode: searchMode,
                    searchValue: searchValue
                };
            })
            // Remove duplicates
            .filter((search, index, self) =>
                search &&
                index === self.findIndex((t) => (
                    t && t.searchMode === search.searchMode && t.searchValue === search.searchValue
                ))
            );
        searches.forEach((s, index) => builder.append(multiple ? `${s.searchMode}[${index}]` : s.searchMode, s.searchValue));
        builder.append('page', page);

        window.location.href = `/search?${builder.toString()}`
    }

    // Kinda jank but eh
    function updateAutocomplete(autocompleter, type)
    {
        if (type == "username")
            autocompleter._config.filter = "/api/Data/username-completion?username=#QUERY#";
        else
            autocompleter._config.filter = null;
    }

    /** @@param {HTMLDivElement} [searchLine] */
    async function createSearchBar(searchLine) {
        if (!searchLine) {
            const searchBarPrefab = document.querySelector('.search-form.prefab');
            searchLine = searchBarPrefab.cloneNode(true);
            searchLine.classList.remove("hidden", "prefab");
            document.querySelector('.search-bar').appendChild(searchLine);
        }

        /** @@type {HTMLButtonElement} */
        const dropdownButton = searchLine.querySelector('.dropdown-toggle');
        /** @@type {HTMLInputElement} */
        const inputElem = searchLine.querySelector('input');

        // add autocomplete on searchLine only using $.autocomplete
        const autocompleter = $(inputElem).autocomplete({
            /**
            Additional processing of data. The autocompleter will fill the input on its own
            @@param {HTMLInputElement} el
            @@param {HTMLElement} item
            */
            onPick(el, item) {
                // if we are the last search bar and we have a selected option, search
                if (searchLine.parentElement.lastElementChild == searchLine) {
                    search(0)
                }
            }
        }).data("bs.autocomplete");
        if (searchLine)
            updateAutocomplete(autocompleter, dropdownButton.getAttribute("data-type"));

        const dropdown = searchLine.querySelectorAll('.dropdown-menu .dropdown-item');
        dropdown.forEach(i => i.addEventListener('click', (e) => {
            const text = e.target.textContent;
            const type = e.target.getAttribute("data-type");
            dropdownButton.textContent = text;
            dropdownButton.setAttribute("data-type", type);
            updateAutocomplete(autocompleter, dropdownButton.getAttribute("data-type"));
        }));

        // enter key listener
        inputElem.addEventListener('keypress', (e) => {
            if (e.key !== 'Enter' || e.defaultPrevented)
                return;
            if (searchLine.parentElement.lastElementChild == searchLine) {
                search(0);
                return; // Technically kinda unreachable/no-op but just in case
            }
            searchLine.nextElementSibling.querySelector("input").focus();
        });
    }

    document.getElementById('addSearchBar').addEventListener('click', () => {
        createSearchBar();
    });

    document.addEventListener('click', (e) => {
        if (e.target.classList.contains('remove-bar')) {
            e.target.parentElement.parentElement.remove();
        }
    });

    document.addEventListener('DOMContentLoaded', async e => {
        const searchBars = document.querySelectorAll(".search-bar .search-form:not(.prefab)");
        searchBars.forEach(bar => createSearchBar(bar));
        if (searchBars.length == 0)
            createSearchBar()
    }, false);


</script>